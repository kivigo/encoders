name: Go Lint

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Detect which modules were changed
  detect-changes:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    outputs:
      main-changed: ${{ steps.changes.outputs.main }}
      encoders-changed: ${{ steps.changes.outputs.encoders }}
      changed-encoders: ${{ steps.changes.outputs.changed-encoders }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changed modules
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}) || {
              echo "Failed to get diff, falling back to HEAD~1"
              changed_files=$(git diff --name-only HEAD~1 HEAD)
            }
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Check if main/core module changed (root go files, go.mod/go.sum, model/)
          main_changed="false"
          if echo "$changed_files" | grep -E "^(go\.mod|go\.sum|[^/]*\.go|model/)" > /dev/null; then
            main_changed="true"
            echo "✅ Main/core module files changed"
          fi
          echo "main=$main_changed" >> $GITHUB_OUTPUT
          
          # Detect encoder modules automatically by presence of a .encoder file in top-level dirs
          encoders_changed="false"
          changed_encoders_list=()
          
          for dir in */; do
            # Consider a directory an encoder if it contains a ".encoder" file
            if [[ -f "${dir}.encoder" ]]; then
              enc_name=$(basename "$dir")
              # Check if any file in that directory changed
              if echo "$changed_files" | grep -E "^${dir}" > /dev/null; then
                encoders_changed="true"
                changed_encoders_list+=("$enc_name")
                echo "✅ Encoder $enc_name files changed"
              fi
            fi
          done
          
          echo "encoders=$encoders_changed" >> $GITHUB_OUTPUT
          
          # Convert array to JSON for matrix
          if [ ${#changed_encoders_list[@]} -gt 0 ]; then
            changed_encoders_json=$(printf '%s\n' "${changed_encoders_list[@]}" | jq -R . | jq -s -c .)
          else
            changed_encoders_json="[]"
          fi
          echo "changed-encoders=$changed_encoders_json" >> $GITHUB_OUTPUT
          echo "Changed encoders: $changed_encoders_json"

  # Lint main package if main/core files changed
  lint-main:
    if: github.actor != 'dependabot[bot]' && needs.detect-changes.outputs.main-changed == 'true'
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        go-version: [1.24, 1.25]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📥 Install golangci-lint and run on main package
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: .
          args: --timeout=5m ./...

  # Lint changed encoder modules only (detected via .encoder files)
  lint-encoders:
    if: github.actor != 'dependabot[bot]' && needs.detect-changes.outputs.encoders-changed == 'true' && needs.detect-changes.outputs.changed-encoders != '[]'
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        encoder: ${{ fromJson(needs.detect-changes.outputs.changed-encoders) }}
        go-version: [1.24, 1.25]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📥 Install golangci-lint and run on ${{ matrix.encoder }} encoder
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ${{ matrix.encoder }}
          args: --timeout=5m --config ../.golangci.yml ./...

  # Generate lint summary for PR
  lint-summary:
    if: github.actor != 'dependabot[bot]' && always()
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-main, lint-encoders]
    steps:
      - name: 🔍 Generate lint summary
        run: |
          echo "## 🔍 Lint Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.main-changed }}" = "true" ]; then
            echo "### 📦 Main Package" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.lint-main.result }}" = "success" ]; then
              echo "✅ Main package linting passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.lint-main.result }}" = "failure" ]; then
              echo "❌ Main package linting failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ Main package linting skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### 📦 Main Package" >> $GITHUB_STEP_SUMMARY
            echo "⏭️ No changes detected - linting skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔌 Encoder Modules" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.encoders-changed }}" = "true" ]; then
            echo "Changed encoders: ${{ needs.detect-changes.outputs.changed-encoders }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.lint-encoders.result }}" = "success" ]; then
              echo "✅ Encoder linting passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.lint-encoders.result }}" = "failure" ]; then
              echo "❌ Encoder linting failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ Encoder linting skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ No encoder changes detected - linting skipped" >> $GITHUB_STEP_SUMMARY
          fi