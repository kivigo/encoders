name: Go Unit Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Detect which modules were changed
  detect-changes:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    outputs:
      main-changed: ${{ steps.changes.outputs.main }}
      encoders-changed: ${{ steps.changes.outputs.encoders }}
      changed-encoders: ${{ steps.changes.outputs.changed-encoders }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changed modules
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}) || {
              echo "Failed to get diff, falling back to HEAD~1"
              changed_files=$(git diff --name-only HEAD~1 HEAD)
            }
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi

          echo "Changed files:"
          echo "$changed_files"

          # Detect encoder modules automatically by presence of a .encoder file in top-level dirs
          encoders_changed="false"
          changed_encoders_list=()

          for dir in */; do
            # Consider a directory an encoder if it contains a ".encoder" file
            if [[ -f "${dir}.encoder" ]]; then
              enc_name=$(basename "$dir")
              # model is core, not an encoder
              if [[ "$enc_name" == "model" ]]; then
                continue
              fi
              # Check if any file in that directory changed
              if echo "$changed_files" | grep -E "^${dir}" > /dev/null; then
                encoders_changed="true"
                changed_encoders_list+=("$enc_name")
                echo "✅ Encoder $enc_name files changed"
              fi
            fi
          done

          echo "encoders=$encoders_changed" >> $GITHUB_OUTPUT

          # Convert array to JSON for matrix
          if [ ${#changed_encoders_list[@]} -gt 0 ]; then
            changed_encoders_json=$(printf '%s\n' "${changed_encoders_list[@]}" | jq -R . | jq -s -c .)
          else
            changed_encoders_json="[]"
          fi
          echo "changed-encoders=$changed_encoders_json" >> $GITHUB_OUTPUT
          echo "Changed encoders: $changed_encoders_json"

  # Test changed encoder modules only (detected via .encoder files)
  test-encoders:
    if: github.actor != 'dependabot[bot]' && needs.detect-changes.outputs.encoders-changed == 'true' && needs.detect-changes.outputs.changed-encoders != '[]'
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        encoder: ${{ fromJson(needs.detect-changes.outputs.changed-encoders) }}
        go-version: [1.24, 1.25]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🗄️ Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.encoder }}-${{ hashFiles(format('{0}/go.sum', matrix.encoder)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.encoder }}-
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: 🏗️ Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📦 Install dependencies for ${{ matrix.encoder }}
        run: |
          cd ${{ matrix.encoder }}
          go mod download

      - name: 🧪 Run ${{ matrix.encoder }} tests with coverage
        run: |
          cd ${{ matrix.encoder }}
          go test -v -timeout=300s -coverprofile=coverage-${{ matrix.encoder }}.out ./...

      - name: 📤 Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        if: matrix.go-version == '1.24'  # Only upload coverage once per encoder
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ matrix.encoder }}/coverage-${{ matrix.encoder }}.out
          parallel: true
          flag-name: ${{ matrix.encoder }}

  # Complete coverage reporting
  finish:
    if: github.actor != 'dependabot[bot]' && !cancelled() && needs.test-encoders.result == 'success'
    needs: [detect-changes, test-encoders]
    runs-on: ubuntu-latest
    steps:
      - name: 🏁 Notify Coveralls of parallel build completion
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  # Generate test summary for PR
  test-summary:
    if: github.actor != 'dependabot[bot]' && always()
    runs-on: ubuntu-latest
    needs: [detect-changes, test-encoders, finish]
    steps:
      - name: 📊 Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Main/Core Package" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ No unit tests exist for the core in this repository. Changes in model/ or pkg/ will not trigger unit tests." >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔌 Encoder Modules" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.encoders-changed }}" = "true" ]; then
            echo "Changed encoders: ${{ needs.detect-changes.outputs.changed-encoders }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.test-encoders.result }}" = "success" ]; then
              echo "✅ Encoder tests passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.test-encoders.result }}" = "failure" ]; then
              echo "❌ Encoder tests failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ Encoder tests skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ No encoder changes detected - tests skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-encoders.result }}" = "success" ]; then
            echo "📊 **Coverage Report**: Check Coveralls for encoder coverage details" >> $GITHUB_STEP_SUMMARY
          fi